Docker install
--------------
sudo yum update -y

sudo yum install -y docker

sudo service docker start

sudo usermod -a -G docker ec2-user

docker info
permission denied

Needs server reboot

Now check 

docker info
docker --version
:
To install wordpress and mysql
------------------------------
docker pull wordpress

docker pull mysql

docker images


docker ps -a

docker logs <containerid>

docker run --name mysqlwpress -d mysql

docker run --name mysqlwpress -e MYSQL_ROOT_PASSWORD=wordpress -d mysql

docker ps -a	

To link the containers wordpress and mysql
------------------------------------------
docker run --name wordpress --link mysqlwpress:mysql -p 80:80 -d wordpress

docker ps

To login mysql container
-----------------------
docker exec -it <containerid> bash

to login mysql

# mysql -u root -p

mysql> show databases

mysql> 

To alter the password
---------------------
mysql> alter user 'root'@'localhost' identified with mysql_native_password by 'wordpress'
mysql> alter user 'root'@'%' identified with mysql_native_password by 'wordpress'

to come out from mysql

control p q


docker run --name wordpress --link mysqlwpress:mysql -p 80:80 -d wordpress

if not run remove the wordpress and try again using

docker rm wordpress


docker ps 


Now in browser access <localhost:80>

In wordpress add the language and create user and password



Container more
---------------------
$docker ps -a

$docker container attach <image>
#ls
#exit
$docker ps -a
$docker container start <imagename>
$ docker exec -it <imagename> pwd
/
$docker ps -a


$docker container run -itd --name cont_nginx -p 808:80/tcp img_expose


$ docker ps -a

Another container

$ docker container run -itd --name cont_nginx-A -P img_expose

$docker ps -a

$docker container port cont_nginx

localhost:80
localhost:32768

Both reveals the same

Cleanup
--------
docker ps -a

docker container rm <imagename>

docker container rm <containerid>

docker container rm <imagename> --force

docker container prune

the above removes the stop container



Networking
----------
docker network drivers









Host n/w infrastructure

Native network docker drivers

Create docker networks
-----------------------

docker network create --driver bridge my-bridge

docker network create --driver bridge --subnet=192.168.0.0./16 --iprange=192.168.5.0/24 my-bridge-1

docker network ls

docker network ls --filter driver=bridge


Working with Docker
-------------------
docker ps -a












